     */
		    public void obfuscate(int chunkX, int chunkY, int bitmask, byte[] buffer, World world)
		    {
		        // If the world is marked as obfuscated
		        if ( world.spigotConfig.antiXray )
		        {
		            // Initial radius to search around for air
		            int initialRadius = 1;
		            // Which block in the buffer we are looking at, anywhere from 0 to 16^4
		            int index = 0;
		            // The iterator marking which random ore we should use next
		            int randomOre = 0;

		            // Chunk corner X and Z blocks
		            int startX = chunkX << 4;
		            int startZ = chunkY << 4;

		            byte replaceWithTypeId;
		            switch ( world.getWorld().getEnvironment() )
		            {
		                case NETHER:
		                    replaceWithTypeId = (byte) CraftMagicNumbers.getId(Blocks.NETHERRACK);
		                    break;
		                case THE_END:
		                    replaceWithTypeId = (byte) CraftMagicNumbers.getId(Blocks.END_STONE);
		                    break;
		                default:
		                    replaceWithTypeId = (byte) CraftMagicNumbers.getId(Blocks.STONE);
		                    break;
		            }

		            // Chunks can have up to 16 sections
		            for ( int i = 0; i < 16; i++ )
		            {
		                // If the bitmask indicates this chunk is sent...
		                if ( ( bitmask & 1 << i ) != 0 )
		                {
		                    // Work through all blocks in the chunk, y,z,x
		                    for ( int y = 0; y < 16; y++ )
		                    {
		                        for ( int z = 0; z < 16; z++ )
		                        {
		                            for ( int x = 0; x < 16; x++ )
		                            {
		                                // For some reason we can get too far ahead of ourselves (concurrent modification on bulk chunks?) so if we do, just abort and move on
		                                if ( index >= buffer.length )
		                                {
		                                    index++;
		                                    continue;
		                                }
		                                // Grab the block ID in the buffer.
		                                // TODO: extended IDs are not yet supported
		                                int blockId = (buffer[index << 1] & 0xFF) 
		                                        | ((buffer[(index << 1) + 1] & 0xFF) << 8);
		                                blockId >>>= 4;
		                                // Check if the block should be obfuscated
		                                if ( obfuscateBlocks[blockId] )
		                                {
		                                    // The world isn't loaded, bail out
		                                    if ( !isLoaded( world, new BlockPosition( startX + x, ( i << 4 ) + y, startZ + z ), initialRadius ) )
		                                    {
		                                        index++;
		                                        continue;
		                                    }
		                                    // On the otherhand, if radius is 0, or the nearby blocks are all non air, we can obfuscate
		                                    if ( !hasTransparentBlockAdjacent( world, new BlockPosition( startX + x, ( i << 4 ) + y, startZ + z ), initialRadius ) )
		                                    {
		                                        int newId = blockId;
		                                        switch ( world.spigotConfig.engineMode )
		                                        {
		                                            case 1:
		                                                // Replace with replacement material
		                                                newId = replaceWithTypeId & 0xFF;
		                                                break;
		                                            case 2:
		                                                // Replace with random ore.
		                                                if ( randomOre >= replacementOres.length )
		                                                {
		                                                    randomOre = 0;
		                                                }
		                                                newId = replacementOres[randomOre++] & 0xFF;
		                                                break;
		                                        }
		                                        newId <<= 4;
		                                        buffer[index << 1] = (byte) (newId & 0xFF);
		                                        buffer[(index << 1) + 1] = (byte) ((newId >> 8) & 0xFF);
		                                    }
		                                }

		                                index++;
		                            }
		                        }
		                    }
		                }
		            }
		        }
		    }

		    private void updateNearbyBlocks(World world, BlockPosition position, int radius, boolean updateSelf)
		    {
		        // If the block in question is loaded
		        if ( world.isLoaded( position ) )
		        {
		            // Get block id
		            Block block = world.getType(position).getBlock();

		            // See if it needs update
		            if ( updateSelf && obfuscateBlocks[Block.getId( block )] )
		            {
		                // Send the update
		                world.notify( position );
		            }

		            // Check other blocks for updates
		            if ( radius > 0 )
		            {
		                updateNearbyBlocks( world, position.east(), radius - 1, true );
		                updateNearbyBlocks( world, position.west(), radius - 1, true );
		                updateNearbyBlocks( world, position.up(), radius - 1, true );
		                updateNearbyBlocks( world, position.down(), radius - 1, true );
		                updateNearbyBlocks( world, position.south(), radius - 1, true );
		                updateNearbyBlocks( world, position.north(), radius - 1, true );
		            }
		        }
		    }

		    private static boolean isLoaded(World world, BlockPosition position, int radius)
		    {
		        return world.isLoaded( position )
		                && ( radius == 0 ||
		                ( isLoaded( world, position.east(), radius - 1 )
		                && isLoaded( world, position.west(), radius - 1 )
